import openai
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, OPENAI_TOKEN


openai.api_key = OPENAI_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


BOT_MESSAGE = """–†–µ–±—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ <a href='https://nometa.xyz/ru.html'>–º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å—ã</a> –≤ —á–∞—Ç–µ!
‚Äì –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã.

–ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤:
- –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ X?
- –ó–¥–µ—Å—å –µ—Å—Ç—å, –∫—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–ª –∫—É—Ä—Å Y?
- –†–µ–±—è—Ç, –∞ –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–ª —Å Z?

–û–Ω–∏ —Ç—Ä–∞—Ç—è—Ç –≤—Ä–µ–º—è! –ò –≤–∞—à–µ, –∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞—é—Ç—Å—è –≤–∞–º –ø–æ–º–æ—á—å :)

–û—Ü–µ–Ω–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ
"""


def is_meta_question(text: str) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–º.

    Parameters
    ----------
    text : str
        –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns
    -------
    bool
        True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å
        False –∏–Ω–∞—á–µ
    """
    prompt = f"""–ú–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–≤ 1) –ú–æ–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? 2) –ö—Ç–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ ...? 3) –ö—Ç–æ —Ä–∞–±–æ—Ç–∞–ª —Å ...? 
    –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å '{text}' –º–µ—Ç–∞-–≤–æ–ø—Ä–æ—Å–æ–º? –ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç. –ì–æ–≤–æ—Ä–∏ –¥–∞, –µ—Å–ª–∏ —Å–∏–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–∞."""
    response = openai.Completion.create(
        engine='text-davinci-003',
        prompt=prompt,
        max_tokens=1500,
        temperature=0.1,
        n=1
    )
    ans = response.choices[0].text.strip().lower()
    if '–¥–∞' in ans:
        return True
    return False


@dp.message_handler()
async def find_meta_questions(message: types.Message):
    if is_meta_question(message.text):
        await message.reply(
            BOT_MESSAGE,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton(text='üëç',
                                     callback_data=f'feedback_like_{message.chat.id}_{message.message_id}'),
                InlineKeyboardButton(text='üëé',
                                     callback_data=f'feedback_dislike_{message.chat.id}_{message.message_id}')
            ))

votes = dict()


@dp.callback_query_handler(Text(startswith='feedback_'))
async def feedback_processing(callback: types.CallbackQuery):
    """–ö–∞–∫ –±–µ–π–∑–ª–∞–π–Ω –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∏—à—É—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å. –î–∞–ª—å—à–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    action, chat_id, message_id = callback.data.split('_')[1:]
    user_id = callback.from_user.id
    if user_id not in votes[message_id]:
        votes[message_id].append(user_id)
        if action == 'like':
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫–∞–∑–∞–ª, —á—Ç–æ –≤–æ–ø—Ä–æ—Å {message_id} —Å —á–∞—Ç–∞ {chat_id} —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–∞–≤–æ–ø—Ä–æ—Å–æ–º')
        elif action == 'dislike':
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫–∞–∑–∞–ª, —á—Ç–æ –≤–æ–ø—Ä–æ—Å {message_id} —Å —á–∞—Ç–∞ {chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–∞–≤–æ–ø—Ä–æ—Å–æ–º')
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!', show_alert=True)
    else:
        await callback.answer('–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏', show_alert=True)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
